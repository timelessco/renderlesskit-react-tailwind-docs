[input]
minimum_indexed_substring_length = 2
title_boost = "Ridiculous"
stemming = "None"

[[input.files]]
title = "progress"
url = "\docs\components\feedback\progress"
contents = "Badge\nProgress is used to display the progress status for a task that takes a long\ntime or consists of several steps.\nImports\nUsage\n<InteractiveCodeblock\nbooleanProps={[\"floating\"]}\nthemeProps={{ size: \"badge.size\", variant: \"badge.variant\" }}\n{({ spreadProps, props }) => {\nconst floating = outdent      <Button variant=\"outline\">\n        Hello world\n        <Badge${spreadProps}>25</Badge>\n      </Button>\n   ;\nreturn props.floating ? floating : <Badge${spreadProps}>Primary</Badge>;\n}}\n\nBadge Variants\nBadge has 4 variants primary secondary outline ghost\nBadge Sizes\nBadge comes with 3 sizes sm md lg\nFloating Badge\nIn some scenarioes where you want to add a floating badge on an element's\ncorners you can set the Badge component to be floating\nAPI Reference\n<PropsTable\ndata={[\n{\nname: \"size\",\ndefault: \"md\",\nthemeKey: \"badge.size\",\ndescription: \"Size of the badge\",\n},\n{\nname: \"variant\",\ndefault: \"primary\",\nthemeKey: \"badge.variant\",\ndescription: \"Variant of the badge\",\n},\n{\nname: \"floating\",\ndefault: \"false\",\ntype: \"boolean\",\ndescription: \"floats the badge on parent element's corners\",\n},\n{\nname: \"position\",\ndefault: \"top-right\",\nthemeKey: \"badge.position\",\ndescription: \"floating position\",\n},\n]}\n/>\n"
filetype = "PlainText"
[[input.files]]
title = "> Checkbox"
url = "\docs\components\forms\checkbox"
contents = "Checkbox\nThe Checkbox is used in forms when a user needs to select multiple values from\nseveral options.\nCheckbox composes reakit's checkbox\ncomponent.\nImports\nCheckbox - main checkbox component\nCheckboxInput - checkbox's input component\nCheckboxLabel - label for checkbox\nCheckboxIcon - renders checkbox's icon\nFormHelperText - text for the checkbox label\nUsage\nAll the form elements of renderlesskit are compatible with FormField, thus you\ncan directly use any of the elements inside of FormField and it will\nautomatically handle all the accessibility & props.\nBasic usage.\n<InteractiveCodeblock\nchildren={({ spreadProps }) =>\n<Checkbox${spreadProps}>Label text</Checkbox>\n}\nbooleanProps={[\"isDisabled\"]}\nthemeProps={{ size: \"checkbox.label.size\" }}\nchoiceProps={{ defaultState: [\"true\", \"false\", \"'indeterminate'\"] }}\n/>\nCheckbox sizes\nCheckbox comes with 3 sizes sm md lg\nControlled Checkbox\nCheckbox Groups\nWe can keep track of multiple checkbox states and use them as a group.\nIndeterminate checkboxes\nCustomizing Checkboxes\nTo customize the checkbox we can use render props api to access the internal\nstate of the checkbox & change it's appearance as we like with composing\nCheckboxInput, CheckboxLabel etc etc components like so:\nIntegrations\n// TBD\nAPI Reference\nCheckbox\nCheckbox composes reakit's checkbox component\n<PropsTable\ndata={[\n{ name: \"size\", themeKey: \"checkbox.label.size\" },\n{\nname: \"defaultState\",\ntypeSimple: \"ReakitCheckboxOptions\",\ntype: 'boolean | \"indeterminate\" | (string | number)[] | undefined',\n},\n{\nname: \"onStateChange\",\ntypeSimple: \"Function\",\ntype: \"(value: CheckboxStatus) => void\",\n},\n]}\n/>\n"
filetype = "PlainText"
[[input.files]]
title = "> FormField"
url = "\docs\components\forms\form-field"
contents = "FormField\nFormField provides a cohesive way render form element's states such as\nisInvalid, isDisabled, and isRequired.\n\nImports\nFormField - main wrapper context\nFormLabel - field's label\nFormLabelValue - renders form element's value\nFormHelperText - renders helper text\nFormErrorText - renders error text when FormField has isInvalid set to\ntrue\nFormRequiredText - renders when FormField has isRequired set to true\nuseFormControl - context hook to glue external form elements with\nFormField's context.\nUsage\nAll the form elements of renderlesskit are compatible with FormField, thus you\ncan directly use any of the elements inside of FormField and it will\nautomatically handle all the accessibility & props.\nBasic usage.\nRequired form fields\nBy passing the isRequired prop, the Input field will have aria-required set\nto true, and the FormRequiredText will be shown.\nUsage with Radios\nUsage with Switch\nUsage with slider\nLet's take a look at how we can use the Slider component with FormField:\nFirst thing you might notice is that we can access the internal state of the\nFormField via render props.\nAnd we are also utilizing the FormLabelValue to render the current value of\nthe Slider.\nUsing custom inputs\nAll the form elements of renderlesskit are compatible with FromField but you\nmight want to use your own input element or any other external input elements.\nFor these situations we provide two ways to bind your custom input elements to\nFormField.\nMethod #1 (render props)\nVia the render props API, we expose the a variable called inputProps which\nholds all the aria related props which can be directly spread into the input.\nMethod #2 (useFormControl hook)\nuseFormControl provides a much cleaner way to bind a custom input to\nFormField, all the renderlesskit form elements internally uses this hook too.\nIntegrations\nReact Hook Form\nThis example shows how to integrate renderlesskit Input with react-hook-form\nExplore on CodeSandbox\nFormik\nThis example shows how to integrate renderlesskit Input with Formik\nExplore on CodeSandbox\nAPI Reference\nFormField\nFormField composes Box\n<PropsTable\ndata={[\n{\nname: \"id\",\ntype: \"string\",\ndescription:\n\"Base id for the FormField which will be cascaded throughout the child component with concatenated unique ids\",\n},\n{\nname: \"isDisabled\",\ntype: \"Boolean\",\ndescription: \"if true Input will be disabled\",\n},\n{\nname: \"isRequired\",\ntype: \"Boolean\",\ndescription: \"if true Input will have required & aria-required\",\n},\n{\nname: \"isReadOnly\",\ntype: \"Boolean\",\ndescription: \"if true Input will have readonly & aria-readonly\",\n},\n{\nname: \"isInvalid\",\ntype: \"Boolean\",\ndescription: \"if true Input will have invalid & aria-invalid\",\n},\n]} />\nuseFormControl\n<PropsTable\ndata={[\n{\nname: \"isDisabled | disabled\",\ntype: \"Boolean\",\ndescription: \"if true Input will be disabled\",\n},\n{\nname: \"isRequired | required\",\ntype: \"Boolean\",\ndescription: \"if true Input will have required & aria-required\",\n},\n{\nname: \"isReadOnly | readOnly\",\ntype: \"Boolean\",\ndescription: \"if true Input will have readonly & aria-readonly\",\n},\n{\nname: \"isInvalid | invalid\",\ntype: \"Boolean\",\ndescription: \"if true Input will have invalid & aria-invalid\",\n},\n]}\n/>\n"
filetype = "PlainText"
[[input.files]]
title = "> Radio"
url = "\docs\components\forms\radio"
contents = "Radio\nRadios are used when only one choice may be selected in a series of options.\nRadio composes reakit's checkbox component.\nImports\nRadio - main radio component\nRadioInput - radio's internal input component\nRadioLabel - label for radio\nRadioIcon - renders radio's icon\nRadioGroup - groups multiple radios together\nUsage\nBasic usage.\nRadio sizes\nRadio comes with 3 sizes sm md lg\n<InteractiveCodeblock themeProps={{ size: \"radio.label.size\" }}>\n{({ spreadProps }) => {\nreturn outdent      <RadioGroup${spreadProps} ariaLabel=\"fruits\" className=\"flex space-x-2\">\n        <Radio value=\"apple\">apple</Radio>\n        <Radio value=\"orange\">Orange</Radio>\n        <Radio value=\"mango\">Mango</Radio>\n      </RadioGroup>\n ;\n}}\n\nDisabled radios\nDefault selected\nYou can pass defaultState to initialize the radio group with a default\nselected value.\nControlled radio\nCustomizing radio\nTo customize the appearance of the Radio component we can simply pass down\nchildren components (RadioLabel, RadioInput, RadioIcon) for more control.\nIntegrations\n// TBD\nAPI Reference\nRadio\nRadio composes reakit's radio component\n<PropsTable\ndata={[\n{ name: \"id\", type: \"string\", description: \"Base id for the radio group\" },\n{\nname: \"value\",\ntype: \"string\",\ndescription:\n\"The value to be used in the radio button. This is the value that will be returned on form submission.	\",\n},\n{ name: \"size\", themeKey: \"radio.label.size\", default: \"md\" },\n{\nname: \"disabled\",\ntype: \"boolean\",\ndescription: \"If true radio will be disabled\",\n},\n{\nname: \"focusable\",\ntype: \"boolean\",\ndescription: \"If true radio can be focused\",\n},\n{\nname: \"checkedIcon\",\ntype: \"React.ReactNode\",\ndescription:\n\"React element to render inside RadioIcon when radio is checked\",\n},\n{\nname: \"uncheckedIcon\",\ntype: \"React.ReactNode\",\ndescription:\n\"React element to render inside RadioIcon when radio is unchecked\",\n},\n{\nname: \"disabledIcon\",\ntype: \"React.ReactNode\",\ndescription:\n\"React element to render inside RadioIcon when radio is disabled\",\n},\n]}\n/>\nRadioGroup\n<PropsTable\ndata={[\n{\nname: \"state\",\ntype: \"string\",\ndescription: \"Sets the state of the selected radio\",\n},\n{\nname: \"defaultState\",\ntype: \"string\",\ndescription: \"Sets default state of the selected radio\",\n},\n{\nname: \"onStateChange\",\ntypeSimple: \"Function\",\ntype: \"(value: CheckboxStatus) => void\",\n},\n{\nname: \"ariaLabel\",\ntype: \"string\",\ndescription: \"Sets aria-label in radio group\",\n},\n]}\n/>\nRadioIcon\n<PropsTable\ndata={[\n{\nname: \"checkedIcon\",\ntype: \"React.ReactNode\",\ndescription:\n\"React element to render inside RadioIcon when radio is checked\",\n},\n{\nname: \"uncheckedIcon\",\ntype: \"React.ReactNode\",\ndescription:\n\"React element to render inside RadioIcon when radio is unchecked\",\n},\n{\nname: \"disabledIcon\",\ntype: \"React.ReactNode\",\ndescription:\n\"React element to render inside RadioIcon when radio is disabled\",\n},\n]}\n/>\n"
filetype = "PlainText"
[[input.files]]
title = "> Switch"
url = "\docs\components\forms\switch"
contents = "Switch\nImports\nSwitch - main switch component\nSwitchLabel - label for switch\nSwitchInput - native input element for switch\nUsage\nBasic usage\n<InteractiveCodeblock\nbooleanProps={[\"defaultState\", \"isDisabled\", \"isReadOnly\", \"isInvalid\"]}\nthemeProps={{ size: \"switch.icon.wrapper.size\" }}\n{({ spreadProps }) => <Switch${spreadProps} />}\n\nSwitch sizes\nSwitch comes with 4 sizes sm md lg xl\nSwitch with label\nIf we pass a string children in switch it will automatically render it inside\nthe SwitchLabel.\nUsage with FormField\nControlled switch\nCustomizing\nTo customize the switch we can use render props api to access the internal state\nof the checkbox & change it's appearance as we like by composing SwitchInput,\nSwitchLabel.\nIf you don't need to access the internal state of the switch, it's also possible\nto directly pass all the jsx inside of the children without the render function.\nIntegrations\n// TBD\nAPI Reference\nSwitch\nInput takes all the native HTMLInputElement props plus:\n<PropsTable\ndata={[\n{\nname: \"isDisabled\",\ntype: \"Boolean\",\ndescription: \"if true switch will be disabled\",\n},\n{\nname: \"isReadOnly\",\ntype: \"Boolean\",\ndescription: \"if true switch will be readOnly\",\n},\n{\nname: \"isInvalid\",\ntype: \"Boolean\",\ndescription: \"if true switch will have aria-invalid set\",\n},\n{\nname: \"isRequired\",\ntype: \"Boolean\",\ndescription: \"if true switch will be required\",\n},\n]}\n/>\n"
filetype = "PlainText"
[[input.files]]
title = "> Input"
url = "\docs\components\forms\input"
contents = "Input\nImports\nInput - main input component\nInputGroup - input group is a wrapper to hold InputGroupPrefix/Suffix\nInputPrefix - prefix of the input element\nInputSuffix - suffix of the input element\nInputGroupSuffix - prefix of the input group\nInputGroupPrefix - suffix of the input group\nUsage\nBasic usage\n<InteractiveCodeblock booleanProps={[\"isDisabled\", \"isReadOnly\", \"isInvalid\"]}>\n{({ spreadProps }) => <Input placeholder=\"Enter email\"${spreadProps} />}\n\nInput Prefix/Suffix\nYou can append or prepend any element inside input. By default we don't give\nspacing to the elements so you have to add spacing as needed.\nInputPrefix is positioned absolutely within the input.\nAs you can see clicking on the input's prefix/suffix will focus the input, but\nthat might not what you want in all scenarios if you want to render a button or\nsomething interactive. To disable this behaviour you can use\nallowPointerEvents\nFor example if you want to add a select inside the suffix you can do so like\nthis:\nInputGroup\nInputGroup is used to add addons before or after the Input component.\nAnd by using InputGroupPrefix we can specify the prefix or suffix.\nThe main difference between InputGroupPrefix & InputPrefix is that:\nInputPrefix is positioned absolutely within the input.\nInputGroupPrefix is positioned adjacent to the input.\nUnlike InputPrefix where you had to add allowPointerEvents to make the\nInputGroupPrefix interactive, in InputGroupPrefix you can directly pass any\ninteractive components (eg: Button).\nHere's a password input example using InputGroupSuffix to attach a toggle\nbutton.\nHere's an example with all the components combined:\nIntegrations\nReact Hook Form\nThis example shows how to integrate renderlesskit Input with react-hook-form\nExplore on CodeSandbox\nFormik\nThis example shows how to integrate renderlesskit Input with Formik\nExplore on CodeSandbox\nAPI Reference\nInput\nInput takes all the native HTMLInputElement props plus:\n<PropsTable\ndata={[\n{\nname: \"isDisabled\",\ntype: \"Boolean\",\ndescription: \"if true Input will be disabled\",\n},\n{\nname: \"isReadOnly\",\ntype: \"Boolean\",\ndescription: \"if true Input will be readonly\",\n},\n{\nname: \"isInvalid\",\ntype: \"Boolean\",\ndescription: \"if true Input will be invalid\",\n},\n]}\n/>\nInputPrefix & InputSuffix\n<PropsTable\ndata={[\n{\nname: \"allowPointerEvents\",\ntype: \"Boolean\",\ndescription: \"if true InputPrefix/Suffix will respond to user events\",\n},\n]}\n/>\n"
filetype = "PlainText"
[[input.files]]
title = "Getting Started"
url = "\docs\getting-started"
contents = "Getting Started\nRenderlesskit uses tailwind to provide better styling so you'll need to install\nthe neccesary dependencies and setup a tailwind.\nInstallation\nTailwind setup\nAfter setting up tailwind in your project, all you need to do inside your\ntailwind.config.js is import our preset function and use it.\nSetting up provider\nRenderlesskit needs a theme provider which passes down all the neccesary styling\nfor the components at the root of your app.\nGo to your root of the application and add this:\n"
filetype = "PlainText"
[[input.files]]
title = "> Icon"
url = "\docs\components\primitives\icon"
contents = "Icon\nIcon is the base svg primitive for creating accssible icons.\nUsage\nBasic usage for Icon component.\nIf no children is provided Icon will render a fallback icon.\nFocusable Icon\nBy passing focusable prop we can make the icon keyboard focusable.\ncreateIcon utility\nTo create icons more easily we provide a createIcon utility which takes few\nprops and returns a React component;\nBasic usage:\nAPI Reference\nIcon\n<PropsTable\ndata={[\n{\nname: \"as\",\ndefault: \"svg\",\ntypeSimple: \"string | React.ElementType\",\ntype: \"type As<Props = any> = React.ElementType\",\ndescription:\n\"Polymorphic as prop, change the component to a different HTML tag or custom component.\",\n},\n]} />\ncreateIcon\n<PropsTable\ndata={[\n{\nname: \"viewBox\",\ndefault: \"0 0 24 24\",\ntype: \"string\",\ndescription: \"The icon's svg viewBox\",\n},\n{\nname: \"path\",\ntype: \"React.ReactElement | React.ReactElement[]\",\ndescription: \"The svg path or group element\",\n},\n{\nname: \"d\",\ntype: \"string\",\ndescription:\n\"If the has a single path, simply copy the path's d attribute\",\n},\n{\nname: \"displayName\",\ntype: \"string\",\ndescription: \"displayName of the component\",\n},\n{\nname: \"defaultProps\",\ntype: 'PropsWithAs<IconProps, \"svg\">',\ndescription:\n\"Default props automatically passed to the component; overwriteable\",\n},\n]}\n/>\n"
filetype = "PlainText"
[[input.files]]
title = "Usage With CRA"
url = "\guides\usage-with-cra"
contents = "Setting up CRA with Renderlesskit\nFirst let's create a new CRA project.\nSetup TailwindCSS\nTo get started with renderlesskit first step is to setup Tailwind CSS in your\nCRA project. Refer to tailwind documentation for\nSetting up Tailwind CSS in a Create React App project\nAfter setting up tailwind in your project, all you need to do inside your\ntailwind.config.js is import our preset function and use it.\nRenderlesskit Setup\nAfter following all the steps and correctly setting up tailwind, now let's add\nthe RenderlesskitProvider\nFollow Setting Up Provider\nTypeScript Setup\nFollow TypeScript Guide\n"
filetype = "PlainText"
[[input.files]]
title = "Usage With Next.js"
url = "\guides\usage-with-nextjs"
contents = "Setting up Next.js with Renderlesskit\nFirst let's create a new Nextjs project.\nSetup TailwindCSS\nTo get started with renderlesskit first step is to setup Tailwind CSS in your\nCRA project. Refer to tailwind documentation for\nSetting up Tailwind CSS in a Next.js project\nAfter setting up tailwind in your project, all you need to do inside your\ntailwind.config.js is import our preset function and use it.\nRenderlesskit Setup\nAfter following all the steps and correctly setting up tailwind, now let's add\nthe RenderlesskitProvider\nFollow Setting Up Provider\nTypeScript Setup\nFollow TypeScript Guide\n"
filetype = "PlainText"
[[input.files]]
title = "alert"
url = "\docs\components\primitives\alert"
contents = "Alert\nAlerts are used to communicate a state that affects a system, feature or page.\nImports\nUsage\nStatus\nChange the status of the alerts by passing the status prop. This affects the\ncolor scheme and icon used. Alert supports error, success, warning, and info\nstatuses.\nClosable Alert\nYou can pass closable prop to make the alert closable and use onClose to\nlisten to the click listener.\nAction Button\nYou can pass actionButtonLabel which would render a action button with the\nprovided text.\nComposition & Customization\nAlert is meant to be used with the single component API by passing props, like\ntitle, description, but if you want to have more control over it's rendering\nyou can pass JSX children elements with Alert specific components.\nAlertIcon\nAlertBody\nAlertTitle\nAlertDescription\nAlertActions\nAlertActionButton\nAlertCloseButton\nYou can also access the internal state/values via the render props pattern.\nYou'll get access to the passed down status prop & the internal theme\nstyles.\n"
filetype = "PlainText"
[[input.files]]
title = "> Box"
url = "\docs\components\primitives\box"
contents = "Box\nBox is the most abstract component on top of which all other Renderlesskit\ncomponents are built.\nIt uses reakit's Role component internally.\nUsage\nAs prop\nBy using the as prop you can control which element should be rendered, if you\nare using typescript Box is fully typesafe too.\nYou can either pass string elements or pass ReactNodes to the as prop.\nCard example\nAPI Reference\n<PropsTable\ndata={[\n{\nname: \"as\",\ndefault: \"div\",\ntypeSimple: \"string | React.ElementType\",\ntype: \"type As<Props = any> = React.ElementType\",\ndescription:\n\"Polymorphic as prop, change the component to a different HTML tag or custom component.\",\n},\n]}\n/>\n"
filetype = "PlainText"
[[input.files]]
title = "> List"
url = "\docs\components\primitives\list"
contents = "List\nList can be used to display structured or nested data.\nImports\nList unordered list, render ul\nListItem list item, render li\nListIcon renders an icon inside li\nUnorderedList - unordered list\nOrderedList - ordered list\nUsage\nList size\nList comes with 3 sizes sm md lg you can pass the size prop to the List\ncomponent\nOrdered List\nList icons\nAPI Reference\nList, OrderedList, UnorderedList Props\n<PropsTable data={[{ name: \"size\", themeKey: \"list.size\", default: \"md\" }]} />\n"
filetype = "PlainText"
[[input.files]]
title = "> Theming"
url = "\docs\theming"
contents = "Customize theme\nIf you need to customize the default styling for any components, you can do so\nby extending the DefaultTheme\nExtending theme tokens\nOur RenderlesskitProvider accepts a theme prop which can be used to extend the\ntheme.\nTo extend or override a token in the default theme simply add a new theme object\n(we called it customTheme) and inside of that create a new extend property\nand assign all your overrides to it.\nFor example, if you want to add a new red variant to the button you can do\nthis:\nIf you are wondering about which keys of theme you can extend you can look at\nthe source code for each specific\ntheme file\nOr if you have setup typescript you can also get autocompletion of those theme\nkeys, checkout TypeScript Guide.\n"
filetype = "PlainText"
[[input.files]]
title = "TypeScript Guide"
url = "\guides\typescript-guide"
contents = "TypeScript Support\nRenderlesskit provides a full typesafe theming system which can be help you get\nbetter intellisense and DX overall.\nIn this guide we are going to see how to setup TypeScript, and see how we can\nadd extra typesafe variants to component themes.\nFirst, we need to extract our custom theme object into it's own file so that\nwe can infer it's types.\nCreating theme file\nCreating declaration file\nTypeScript definitions for the Renderlesskit's theme can be extended by using\ndeclaration merging.\nSo the first step is creating a declarations file. Let's name it global.d.ts\nfor example.\nFor CRA projects you can put this content inside react-app-env.d.ts\nThats It!\nNow if you create a new Button you'll see that there is a new variant called\nred\n\n"
filetype = "PlainText"
[[input.files]]
title = "Home"
url = "\"
contents = "Renderlesskit React Tailwind\nReact UI built with @renderleskit/react & tailwind\n"
filetype = "PlainText"
[[input.files]]
title = "> Button"
url = "\docs\components\primitives\button"
contents = "Button\nThe Button component can be used to trigger various kinds of user events such as\nsuch as submitting a form, opening a dialog, canceling an action, or performing\na delete operation.\nImports\nButton: The button which has prefix/suffix icons support, variants & size.\nButtonGroup: Used to group related buttons together in a horizontal stack,\ncan also be set as attached\nIconButton: Accessible button to show an icon\nUsage\nDefault Button\n<InteractiveCodeblock\nchildren={({ spreadProps }) => <Button${spreadProps}>Click me</Button>}\nbooleanProps={[\"loading\"]}\nthemeProps={{ size: \"button.size\", variant: \"button.variant\" }}\n/>\nButton sizes\nButton variants\nButton prefix & suffix\nYou can pass prefix and suffix props to the button to append or prepend any\ncontent inside of button.\nButton spinner\nYou can pass loading prop to indicate that the button is loading.\nYou can also add custom loading spinner by passing a spinner prop\nIconButton\nIcon button provides an accessible way to render an icon within a button. It\nsets it's children's role to img & sets aria-hidden to true.\nButtonGroup\nButtonGroup can be used to group together multiple buttons & also collapse their\nborder radius & gap via the attached prop\nButton group accepts size & variant prop which is passed down to all the\nchild buttons automatically.\nAttached button group, when set to true it collapses border radius of the\nbuttons.\nYou can also put IconButton inside IconButton\nAPI Reference\nButton\n<PropsTable\ndata={[\n{\nname: \"size\",\ndefault: \"md\",\nthemeKey: \"button.size\",\ndescription: \"Size of the button\",\n},\n{\nname: \"variant\",\ndefault: \"primary\",\nthemeKey: \"button.variant\",\ndescription: \"Variant of the button\",\n},\n{\nname: \"prefix\",\ntype: \"React.ReactNode\",\ndescription:\n\"If added, the button will show an element before the button's label\",\n},\n{\nname: \"suffix\",\ntype: \"React.ReactNode\",\ndescription:\n\"If added, the button will show an element after the button's label\",\n},\n{\nname: \"loading\",\ntype: \"boolean\",\ndescription: \"If true, the button will show a spinner\",\n},\n{\nname: \"spinner\",\ntype: \"React.ReactElement\",\ndescription: \"If added, the button will show this spinner components\",\n},\n]}\n/>\nButtonGroup\n<PropsTable\ndata={[\n{\nname: \"size\",\ndefault: \"md\",\nthemeKey: \"button.size\",\ndescription: \"Size of the button\",\n},\n{\nname: \"variant\",\ndefault: \"primary\",\nthemeKey: \"button.variant\",\ndescription: \"Variant of the button\",\n},\n{\nname: \"attached\",\ndefault: \"false\",\ntype: \"boolean\",\ndescription:\n\"If true, Buttons inside the group will be collapsed together.\",\n},\n]}\n/>\nIconButton\n<PropsTable\ndata={[\n{\nname: \"size\",\ndefault: \"md\",\nthemeKey: \"button.size\",\ndescription: \"Size of the button\",\n},\n{\nname: \"variant\",\ndefault: \"primary\",\nthemeKey: \"button.variant\",\ndescription: \"Variant of the button\",\n},\n]}\n/>\n"
filetype = "PlainText"
[[input.files]]
title = "> Badge"
url = "\docs\components\primitives\badge"
contents = "Badge\nDisplay an indicator that requires attention.\nImports\nUsage\n<InteractiveCodeblock\nbooleanProps={[\"floating\"]}\nthemeProps={{ size: \"badge.size\", variant: \"badge.variant\" }}\n{({ spreadProps, props }) => {\nconst floating = outdent      <Button variant=\"outline\">\n        Hello world\n        <Badge${spreadProps}>25</Badge>\n      </Button>\n   ;\nreturn props.floating ? floating : <Badge${spreadProps}>Primary</Badge>;\n}}\n\nBadge Variants\nBadge has 4 variants primary secondary outline ghost\nBadge Sizes\nBadge comes with 3 sizes sm md lg\nFloating Badge\nIn some scenarioes where you want to add a floating badge on an element's\ncorners you can set the Badge component to be floating\nAPI Reference\n<PropsTable\ndata={[\n{\nname: \"size\",\ndefault: \"md\",\nthemeKey: \"badge.size\",\ndescription: \"Size of the badge\",\n},\n{\nname: \"variant\",\ndefault: \"primary\",\nthemeKey: \"badge.variant\",\ndescription: \"Variant of the badge\",\n},\n{\nname: \"floating\",\ndefault: \"false\",\ntype: \"boolean\",\ndescription: \"floats the badge on parent element's corners\",\n},\n{\nname: \"position\",\ndefault: \"top-right\",\nthemeKey: \"badge.position\",\ndescription: \"floating position\",\n},\n]}\n/>\n"
filetype = "PlainText"
[[input.files]]
title = "> Avatar"
url = "\docs\components\primitives\avatar"
contents = "Avatar\nAvatar component is used to display user's profile picture, initials or icons.\nImports\nUsage\n<InteractiveCodeblock\nbooleanProps={[\"showBorder\"]}\nthemeProps={{ size: \"avatar.size\", status: \"avatar.badge.statuses\" }}\n{({ spreadProps }) =>\n<Avatar${spreadProps} src=\"https://bit.ly/dan-abramov\" name=\"Dan Abramov\" />\n}\n\nAvatar sizes\nAvatar has 5 sizes xs sm md lg xl\nAvatar with badge\nBy using AvatarBadge component you can show status icons at the right corner\nof the Avatar.\nCustom badge\nYou can also customize the badge, by providing <Avatar /> with children &\nusing AvatarContens, AvatarBadge components.\nAvatar fallbacks\nIf there is an error loading the src of the avatar, there are 2 fallbacks:\nIf there's a name prop, we use it to generate the initials.\nIf there's no name prop, we use a default avatar.\nIf both name and src are not provided you can pass a fallback prop to show any\ncontent, fallback has the lowest priority thus if name or src is provided\nfallback will be ignored.\nAvatarGroup\nAvatarGroup renders its children as a stack, and you can:\nlimit the total number of amount rendered and truncating the excess ones.\nadjust size of all the avatars inside the AvatarGroup equally via the size\nprop.\nAPI Reference\nAvatar\n<PropsTable\ndata={[\n{ name: \"src\", type: \"string\", description: \"URL for the avatar image\" },\n{\nname: \"name\",\ntype: \"string\",\ndescription: \"Name prop used for alt & calculate placeholder initials.\",\n},\n{\nname: \"loading\",\ntypeSimple: \"union\",\ntype: \"'eager' | 'lazy'\",\ndescription: \"Defines loading strategy\",\n},\n{\nname: \"fallback\",\ntype: \"React.ReactNode\",\ndescription:\n\"The default avatar used as fallback when name, and src is not specified.\",\n},\n{\nname: \"showBorder\",\ntype: \"boolean\",\ndescription: \"If true, the Avatar will show a border around it.\",\n},\n{\nname: \"borderColor\",\ntype: \"string\",\ndescription: \"Color of the border to match it's parent background.\",\n},\n{\nname: \"getInitials\",\ntypeSimple: \"Function\",\ntype: \"(name?: string) => string | undefined\",\ndescription: \"Function called when image failed to load\",\n},\n{\nname: \"size\",\nthemeKey: \"avatar.size\",\ndescription: \"Size of the avatar\",\ndefault: \"md\",\n},\n{\nname: \"status\",\nthemeKey: \"avatar.badge.statuses\",\ndescription: \"Shows AvatarBadge with the given type\",\ndefault: \"\",\n},\n{\nname: \"position\",\nthemeKey: \"avatar.badge.position\",\ndescription: \"Position for the AvatarBadge\",\ndefault: \"top-right\",\n},\n]}\n/>\nAvatarGroup\n<PropsTable\ndata={[\n{\nname: \"limit\",\ntype: \"number\",\ndescription: \"Max number of Avatars to render before truncating\",\n},\n{\nname: \"showBorder\",\ntype: \"boolean\",\ndescription: \"If true, the Avatar will show a border around it.\",\n},\n{\nname: \"borderColor\",\ntype: \"string\",\ndescription: \"Color of the border to match it's parent background.\",\n},\n{\nname: \"size\",\nthemeKey: \"avatar.size\",\ndescription: \"Size of the avatar\",\ndefault: \"md\",\n},\n]}\n/>\nAvatarBadge\n<PropsTable\ndata={[\n{\nname: \"status\",\nthemeKey: \"avatar.badge.statuses\",\ndescription: \"Shows AvatarBadge with the given type\",\n},\n]}\n/>\n"
filetype = "PlainText"
[[input.files]]
title = "> Tag"
url = "\docs\components\primitives\tag"
contents = "Tag\nTag is used when items need to be labelled, categorized, and organized using\nkeywords that describe them.\nImports\nTag Standalone tag component\nTagGroup Used to group related tags together in a horizontal stack.\nUsage\n<InteractiveCodeblock\nchildren={({ spreadProps }) => <Tag${spreadProps}>Hello world</Tag>}\nbooleanProps={[\"closable\"]}\nthemeProps={{ size: \"tag.size\", variant: \"tag.variant\" }}\nchoiceProps={{\nprefix: [\"\", \"\"],\nsuffix: [\"\", \"\"],\n}}\n/>\nTag Variants\nTag has 4 variants primary secondary outline ghost\nTag Sizes\nTag comes with 3 sizes sm md lg\nClosable Tag\nTags can be closable or removable. If closable prop is passed tag will show a\nclose icon in the suffix.\nTag Prefix/Suffix\nSame as buttons Tag also accepts prefix, suffix props which can be used to\nappend or prepend content in the tag.\nSuffix will only be rendered if closable is set to true\nTagGroup\nTagGroup can be used to group multiple tags together & can pass down size,\nvariant props.\nWhile using TagGroup, we will add roving index to the closable icons that means\nyou can move the focus with the arrow keys.\nTo disable roving index on the tag closable icons you can set\nallowArrowNavigation=false\nAPI Reference\nTag Props\n<PropsTable\ndata={[\n{ name: \"id\", type: \"string\", description: \"Id for the tag\" },\n{ name: \"size\", themeKey: \"tag.size\", default: \"md\" },\n{ name: \"variant\", themeKey: \"tag.variant\", default: \"primary\" },\n{\nname: \"closable\",\ntype: \"Boolean\",\ndescription:\n\"If added, tag will show suffix after the tag's label, This will only show if closable is set to true\",\ndefault: \"false\",\n},\n{\nname: \"onClose\",\ntype: \"(id?: string) => void\",\ntypeSimple: \"Function\",\ndescription: \"Callback to fire when close icon is clicked\",\n},\n{\nname: \"prefix\",\ntype: \"React.ReactElement\",\ndescription:\n\"If added, tag will show prefix the content before the tag's label\",\n},\n{\nname: \"suffix\",\ntype: \"React.ReactElement\",\ndescription:\n\"If added, tag will show suffix the content after the tag's label\",\ndefault: \"\",\n},\n]}\n/>\nTagGroup Props\n<PropsTable\ndata={[\n{ name: \"size\", themeKey: \"tag.size\", default: \"md\" },\n{ name: \"variant\", themeKey: \"tag.variant\", default: \"primary\" },\n{\nname: \"allowArrowNavigation\",\ntype: \"Boolean\",\ndefault: \"true\",\ndescription:\n\"If set to false, it disables roving index for the tag close icons\",\n},\n]}\n/>\n"
filetype = "PlainText"
